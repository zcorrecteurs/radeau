# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    _defaults:
        autowire: true
        autoconfigure: true

    _instanceof:
        App\Infrastructure\Bus\CommandHandler:
            tags: ['app.command_handler']
        App\Infrastructure\Bus\QueryHandler:
            tags: ['app.query_handler']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Domain,Migrations,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # Uses constructor to deserialize objects and properties to serialize them.
    Symfony\Component\Serializer\Normalizer\PropertyNormalizer:
        public: false
        tags: [serializer.normalizer]

    App\Infrastructure\GitHub\Client:
        class: App\Infrastructure\GitHub\RestClient
        arguments:
            $appId: "%env(GITHUB_APP_ID)%"
            $privateKey: "%env(GITHUB_PRIVATE_KEY)%"

    App\Infrastructure\Kubernetes\Client:
        class: App\Infrastructure\Kubernetes\KubeClient

    App\Infrastructure\Bus\CommandBusInterface:
        class: App\Infrastructure\Bus\SynchronousCommandBus
        arguments:
        - !tagged { tag: 'app.command_handler' }

    App\Infrastructure\Bus\QueryBusInterface:
        class: App\Infrastructure\Bus\QueryBus
        arguments:
        - !tagged { tag: 'app.query_handler' }